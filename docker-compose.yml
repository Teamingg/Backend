networks:
  backend-network:
    name: backend-network
    driver: bridge

services:
  my-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: local-my-server
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/teaming
      SPRING_REDIS_HOST: my-cache-server
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

    depends_on:
      my-cache-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network

  my-cache-server:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 10
    networks:
      - backend-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: wurstmeister/kafka:latest
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "notification-events:2:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka:9092"]
      interval: 10s
      retries: 10
    networks:
      - backend-network

volumes:
  redis_data:
  kafka_data:
